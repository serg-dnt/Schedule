# patient_bot/handlers/choose_doctor.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from patient_bot.states import AppointmentFSM
from patient_bot.keyboards.inline import back_main_menu_keyboard
from patient_bot.utils.api import get_doctors
from patient_bot.utils.logger import setup_logger
from patient_bot.handlers.choose_service import choose_service

router = Router()
logger = setup_logger(__name__)

@router.callback_query(F.data == "start_booking")
async def handle_start_booking(callback: CallbackQuery, state: FSMContext):
    logger.info(f"üë§ {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏.")
    await state.set_state(AppointmentFSM.choosing_doctor)

    try:
        doctors = get_doctors(callback.from_user.id)
        if not doctors:
            logger.warning("–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –ø—É—Å—Ç.")
            await callback.message.edit_text(
                "‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–∞—á–µ–π.",
                reply_markup=back_main_menu_keyboard("main_menu")
            )
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=doctor["full_name"], callback_data=f"doctor:{doctor['id']}")]
                for doctor in doctors
            ] + back_main_menu_keyboard("main_menu").inline_keyboard
        )

        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ üë®‚Äç‚öïÔ∏è:", reply_markup=keyboard)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π")
        await callback.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π.",
            reply_markup=back_main_menu_keyboard("main_menu")
        )


@router.callback_query(F.data.startswith("doctor:"))
async def doctor_selected(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    telegram_id = callback.from_user.id

    try:
        doctor_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        logger.warning(f"User {telegram_id}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π doctor_id –≤ callback_data: {callback.data}")
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–∞—á–∞.",
            reply_markup=back_main_menu_keyboard("start_booking")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—Ä–∞—á–∞ –ø–æ callback_data –∏–∑ –∫–Ω–æ–ø–æ–∫
    doctor_name = None
    for row in callback.message.reply_markup.inline_keyboard:
        for button in row:
            if button.callback_data == callback.data:
                doctor_name = button.text
                break
        if doctor_name:
            break

    await state.update_data(doctor_id=doctor_id, doctor_name=doctor_name)
    logger.info(f"User {telegram_id}: –≤—ã–±—Ä–∞–ª –≤—Ä–∞—á–∞ {doctor_id} ({doctor_name})")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏
    await choose_service(callback, state)