import asyncio
import logging
import os
import django
from telegram.ext import MessageHandler, filters
from datetime import datetime, timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)
from asgiref.sync import sync_to_async
from dotenv import load_dotenv

# ‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TOKEN = os.getenv("DOCTOR_TELEGRAM_TOKEN")

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "Schedule.settings")
django.setup()

from booking.models import User, AvailableSlot, Appointment

# ‚Äî‚Äî‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s ‚Äì %(levelname)s ‚Äì %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî ORM-—Ö–µ–ª–ø–µ—Ä—ã
@sync_to_async
def get_doctor_by_telegram_id(tg_id):
    return User.objects.get(telegram_id=tg_id, is_doctor=True, is_doctor_approved=True)

@sync_to_async
def get_free_slot_dates(doctor):
    return list(
        AvailableSlot.objects.filter(doctor=doctor, is_booked=False)
        .order_by("start_datetime")
        .values_list("start_datetime__date", flat=True)
        .distinct()
    )

@sync_to_async
def get_free_slots_by_date(doctor, date):
    return list(
        AvailableSlot.objects.filter(
            doctor=doctor, is_booked=False, start_datetime__date=date
        ).order_by("start_datetime")
    )

@sync_to_async
def get_active_appointments_dates(doctor):
    return list(
        Appointment.objects.filter(doctor=doctor, status="active")
        .order_by("start_datetime")
        .values_list("start_datetime__date", flat=True)
        .distinct()
    )

@sync_to_async
def get_appointments_by_date(doctor, date):
    return list(
        Appointment.objects.filter(
            doctor=doctor, status="active", start_datetime__date=date
        ).select_related("patient", "service")
    )


# ‚Äî‚Äî‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç—ã", callback_data="create_slots")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç—ã", callback_data="delete_slots")],
        [InlineKeyboardButton("üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ—Ç—ã", callback_data="view_free_dates")],
        [InlineKeyboardButton("üë• –ó–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", callback_data="view_appointments")],
    ]
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(kb))
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(kb))


# ‚Äî‚Äî‚Äî /start
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await get_doctor_by_telegram_id(update.effective_user.id)
    except User.DoesNotExist:
        await update.message.reply_text("‚ùå –í–∞—à Telegram ID –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∫–∞–∫ –≤—Ä–∞—á.")
        return
    await main_menu(update, context)


# ‚Äî‚Äî‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
async def handle_view_free_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    doctor = await get_doctor_by_telegram_id(update.effective_user.id)
    dates = await get_free_slot_dates(doctor)
    if not dates:
        return await show_empty_with_back(
            update, "–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç."
        )
    kb = [
        [InlineKeyboardButton(d.isoformat(), callback_data=f"slots_{d.isoformat()}")]
        for d in dates
    ] + [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await update.callback_query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(kb))


async def handle_view_slots_by_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    doctor = await get_doctor_by_telegram_id(update.effective_user.id)
    date = datetime.fromisoformat(update.callback_query.data.replace("slots_", "")).date()
    slots = await get_free_slots_by_date(doctor, date)
    text = "üïí " + "\nüïí ".join(s.start_datetime.strftime("%H:%M") for s in slots) if slots else "–ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É."
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    )


# ‚Äî‚Äî‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
async def handle_view_patient_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    doctor = await get_doctor_by_telegram_id(update.effective_user.id)
    dates = await get_active_appointments_dates(doctor)
    if not dates:
        return await show_empty_with_back(
            update, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."
        )
    kb = [
        [InlineKeyboardButton(d.isoformat(), callback_data=f"apps_{d.isoformat()}")]
        for d in dates
    ] + [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await update.callback_query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(kb))


async def handle_view_apps_by_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    doctor = await get_doctor_by_telegram_id(update.effective_user.id)
    date = datetime.fromisoformat(update.callback_query.data.replace("apps_", "")).date()
    apps = await get_appointments_by_date(doctor, date)
    lines = [f"{a.patient.full_name} ‚Äì {a.service.name} @ {a.start_datetime.strftime('%H:%M')}" for a in apps]
    text = "üë• " + "\nüë• ".join(lines) if lines else "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    )


# ‚Äî‚Äî‚Äî –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–∏–π —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
async def show_empty_with_back(update: Update, message: str):
    kb = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await update.callback_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(kb))


# from telegram.ext import MessageHandler, filters
# from datetime import datetime, timedelta

# ‚Äî‚Äî‚Äî –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ ‚Äî FSM –ª–æ–≥–∏–∫–∞
async def handle_create_slots_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    context.user_data["fsm"] = {"step": "date"}
    await update.callback_query.edit_message_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")


# ‚Äî‚Äî‚Äî –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤

@sync_to_async
def get_slot_by_id(slot_id):
    return AvailableSlot.objects.get(id=slot_id)


@sync_to_async
def get_slot_ids_by_date(doctor, date):
    return list(
        AvailableSlot.objects.filter(
            doctor=doctor, is_booked=False, start_datetime__date=date
        ).order_by("start_datetime").values_list("id", "start_datetime")
    )


@sync_to_async
def delete_slots_by_ids(ids):
    return AvailableSlot.objects.filter(id__in=ids).delete()


async def handle_delete_slots(update: Update,
                              context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    doctor = await get_doctor_by_telegram_id(update.effective_user.id)
    dates = await get_free_slot_dates(doctor)
    if not dates:
        return await show_empty_with_back(update,
                                          "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    kb = [
             [InlineKeyboardButton(d.isoformat(),
                                   callback_data=f"deldate_{d.isoformat()}")]
             for d in dates
         ] + [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                    callback_data="main_menu")]]
    await update.callback_query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(kb))


async def handle_delete_slots_date(update: Update,
                                   context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    doctor = await get_doctor_by_telegram_id(update.effective_user.id)
    date_str = update.callback_query.data.replace("deldate_", "")
    date = datetime.fromisoformat(date_str).date()
    slots = await get_slot_ids_by_date(doctor, date)

    if not slots:
        return await show_empty_with_back(update,
                                          "–ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")

    context.user_data["fsm_delete"] = {"date": date, "selected": set(),
                                       "all_slots": slots}

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ä–∞–∑—É —Å –ø—É—Å—Ç—ã–º–∏ –æ—Ç–º–µ—Ç–∫–∞–º–∏
    buttons = []
    for slot_id, dt in slots:
        label = f"üïí {dt.strftime('%H:%M')}"
        buttons.append([InlineKeyboardButton(label,
                                             callback_data=f"toggleslot_{slot_id}")])
    buttons.append([InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ",
                                         callback_data="confirm_delete_slots")])
    buttons.append(
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons))


async def handle_toggle_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    slot_id = int(update.callback_query.data.replace("toggleslot_", ""))
    fsm = context.user_data.get("fsm_delete", {})
    selected = fsm.get("selected", set())
    all_slots = fsm.get("all_slots", [])

    if slot_id in selected:
        selected.remove(slot_id)
    else:
        selected.add(slot_id)

    fsm["selected"] = selected
    context.user_data["fsm_delete"] = fsm

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á—ë—Ç–æ–º –≤—ã–¥–µ–ª–µ–Ω–∏—è
    buttons = []
    for sid, dt in all_slots:
        label = f"{'‚úÖ' if sid in selected else 'üïí'} {dt.strftime('%H:%M')}"
        buttons.append([InlineKeyboardButton(label, callback_data=f"toggleslot_{sid}")])
    buttons.append([InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="confirm_delete_slots")])
    buttons.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    await update.callback_query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))


async def handle_confirm_delete(update: Update,
                                context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    fsm = context.user_data.get("fsm_delete")
    if not fsm or not fsm.get("selected"):
        return await update.callback_query.edit_message_text(
            "‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞.")
    count = len(fsm["selected"])
    await delete_slots_by_ids(fsm["selected"])
    context.user_data.pop("fsm_delete", None)
    await update.callback_query.edit_message_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {count}")
    await main_menu(update, context)

async def handle_fsm_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fsm = context.user_data.get("fsm")
    if not fsm:
        return

    doctor = await get_doctor_by_telegram_id(update.effective_user.id)
    text = update.message.text.strip()

    if fsm["step"] == "date":
        try:
            date = datetime.strptime(text, "%Y-%m-%d").date()
            fsm["date"] = date
            fsm["step"] = "start_time"
            await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")

    elif fsm["step"] == "start_time":
        try:
            time_start = datetime.strptime(text, "%H:%M").time()
            fsm["start_time"] = time_start
            fsm["step"] = "end_time"
            await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00):")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")

    elif fsm["step"] == "end_time":
        try:
            time_end = datetime.strptime(text, "%H:%M").time()
            fsm["end_time"] = time_end

            # –§–æ—Ä–º–∏—Ä—É–µ–º datetime
            date = fsm["date"]
            start_dt = datetime.combine(date, fsm["start_time"])
            end_dt = datetime.combine(date, time_end)

            if end_dt <= start_dt:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞.")
                return

            created = await create_slots_for_doctor(doctor, start_dt, end_dt)
            await update.message.reply_text(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: {created}")

            context.user_data.pop("fsm")
            await main_menu(update, context)

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


# ‚Äî‚Äî‚Äî –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –≤ –ë–î
@sync_to_async
def create_slots_for_doctor(doctor, start_dt, end_dt, interval_minutes=15):
    count = 0
    current = start_dt
    while current + timedelta(minutes=interval_minutes) <= end_dt:
        slot_start = current
        slot_end = current + timedelta(minutes=interval_minutes)

        exists = AvailableSlot.objects.filter(
            doctor=doctor,
            start_datetime=slot_start
        ).exists()

        if not exists:
            AvailableSlot.objects.create(
                doctor=doctor,
                start_datetime=slot_start,
                end_datetime=slot_end
            )
            count += 1
        current = slot_end
    return count


# ‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))

    app.add_handler(CallbackQueryHandler(handle_view_free_dates, pattern="^view_free_dates$"))
    app.add_handler(CallbackQueryHandler(handle_view_slots_by_date, pattern="^slots_"))

    app.add_handler(CallbackQueryHandler(handle_view_patient_appointments, pattern="^view_appointments$"))
    app.add_handler(CallbackQueryHandler(handle_view_apps_by_date, pattern="^apps_"))

    app.add_handler(CallbackQueryHandler(handle_create_slots_callback, pattern="^create_slots$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_fsm_input))

    app.add_handler(
        CallbackQueryHandler(handle_delete_slots, pattern="^delete_slots$"))
    app.add_handler(
        CallbackQueryHandler(handle_delete_slots_date, pattern="^deldate_"))
    app.add_handler(
        CallbackQueryHandler(handle_toggle_slot, pattern="^toggleslot_"))
    app.add_handler(CallbackQueryHandler(handle_confirm_delete,
                                         pattern="^confirm_delete_slots$"))

    logger.info("ü§ñ DoctorBot –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ü–∏–∫–ª–∞
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
